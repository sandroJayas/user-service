definitions:
  dto.CreateEmployeeRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.UpdateProfileRequest:
    properties:
      address_line_1:
        type: string
      address_line_2:
        type: string
      city:
        type: string
      country:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      payment_method_id:
        type: string
      phone_number:
        type: string
      postal_code:
        type: string
    required:
    - address_line_1
    - city
    - country
    - first_name
    - last_name
    - phone_number
    - postal_code
    type: object
info:
  contact: {}
paths:
  /users/create-employee:
    post:
      consumes:
      - application/json
      description: Allows creation of a user with employee privileges
      parameters:
      - description: Employee creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created employee in 'user' field
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a Sort employee account
      tags:
      - admin
  /users/delete:
    delete:
      description: Marks the user as deleted (is_deleted = true)
      produces:
      - application/json
      responses:
        "200":
          description: Deletion confirmation
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Soft-delete the current user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticates user with email and password, returns JWT token
      parameters:
      - description: Login data
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token in 'token' field
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - auth
  /users/me:
    get:
      description: Returns the user data for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User object in 'user' field
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - users
  /users/profile:
    put:
      consumes:
      - application/json
      description: Updates the logged-in user's profile fields
      parameters:
      - description: Profile update data
        in: body
        name: updateRequest
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated user in 'user' field
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user's profile
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account with email and password
      parameters:
      - description: Registration data
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created user object in 'user' field
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /users/special:
    post:
      description: This route is only accessible by Sort employees (account_type=employee)
      produces:
      - application/json
      responses:
        "200":
          description: Success message
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Special command for Sort employees
      tags:
      - users
swagger: "2.0"
